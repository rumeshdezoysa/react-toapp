{"version":3,"sources":["component/ToDoForm.js","component/Todo.js","component/ToDoList.js","App.js","reportWebVitals.js","index.js"],"names":["ToDoForm","state","text","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","props","onSubmit","id","shortid","generate","complete","this","onChange","placeholder","onClick","React","Component","style","display","justifyContent","textDecoration","todo","toggleComplete","onDelete","ToDoList","todos","todoToShow","toggleAllcomplete","addTodo","map","updateTodoToShow","s","handledeleteTodo","filter","removeAllTodosThatAreComplete","Todo","length","some","App","visible","count","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.38264ffd.chunk.js","sourcesContent":["import React from 'react';\r\nimport shortid from 'shortid';\r\n\r\nexport class ToDoForm extends React.Component {\r\n    state = {\r\n        text: \"\"\r\n    }\r\n    handleChange = (event)=>{\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n\r\n    }\r\n    handleSubmit = (event)=>{\r\n        event.preventDefault();\r\n        this.props.onSubmit({\r\n            id:shortid.generate(),\r\n            text: this.state.text,\r\n            complete: false\r\n\r\n        })\r\n        this.setState({\r\n            text: \"\"\r\n        });\r\n        //submit\r\n\r\n    }\r\n    render() {\r\n\r\n        return (\r\n                <form onSubmit={this.handleSubmit}>\r\n                <input name=\"text\"\r\n                 value={this.state.text} \r\n                onChange={this.handleChange}\r\n                 placeholder=\"todo...\"/>\r\n                 <button onClick={this.handleSubmit}>Add Todo</button>\r\n                 </form>\r\n        );\r\n        \r\n    }   \r\n}\r\n","import React from 'react';\r\n\r\nexport default props => (\r\n<div style={{display: \"flex\", justifyContent: \"center\"}}>\r\n<div style={{\r\n    textDecoration: props.todo.complete ? 'line-through' : \"\"\r\n}} onClick={props.toggleComplete}>{props.todo.text}</div>\r\n<button onClick={props.onDelete}>x</button>\r\n</div>\r\n);\r\n\r\n","import React from 'react';\r\nimport {ToDoForm} from '../component/ToDoForm'\r\nimport Todo from './Todo'\r\n\r\n/* \r\n1. add todo\r\n2. display todo\r\n3. cross off todo\r\n4. show number of active todos\r\n5. filter all/active/complete\r\n6. delete todo\r\n7. delete all complete\r\n 7.1 only show if atleast one is complete\r\n8. button to toggle all on/off\r\n\r\n*/\r\n\r\nexport class ToDoList extends React.Component {\r\n    state = {\r\n        todos: [],\r\n        todoToShow : \"all\",\r\n        toggleAllcomplete: true\r\n    };\r\n\r\n    addTodo = (todo)=>{\r\n        this.setState({\r\n            todos: [todo,...this.state.todos]\r\n        });\r\n\r\n    };\r\n    toggleComplete = (id)=>{\r\n        this.setState({\r\n            todos: this.state.todos.map(todo => {\r\n                if(todo.id === id){\r\n                    // suppose to update\r\n                    return{\r\n                        ...todo,\r\n                        // id: todo.id,\r\n                        // text: todo.text,\r\n                        complete: !todo.complete\r\n                    }\r\n\r\n                }else{\r\n                    return todo;\r\n                }\r\n            })\r\n        });\r\n\r\n    };\r\n    updateTodoToShow = (s)=>{\r\n        this.setState({\r\n            todoToShow : s\r\n        });\r\n    };\r\n    handledeleteTodo = (id)=>{\r\n        this.setState({\r\n            todos: this.state.todos.filter(todo => todo.id !== id)\r\n        });\r\n\r\n    };\r\n    removeAllTodosThatAreComplete = ()=>{\r\n        this.setState({\r\n            todos: this.state.todos.filter(todo => !todo.complete)\r\n        });\r\n\r\n    };\r\n\r\n    render() {\r\n        let todos = [];\r\n\r\n        if(this.state.todoToShow ===\"all\"){\r\n            todos = this.state.todos;\r\n        }else if(this.state.todoToShow === \"active\"){\r\n            todos = this.state.todos.filter(todo=> !todo.complete);\r\n        }else if(this.state.todoToShow === \"complete\"){\r\n            todos = this.state.todos.filter(todo=> todo.complete);\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <ToDoForm onSubmit={this.addTodo}/>\r\n                {/* {JSON.stringify(this.state.todos)} */}\r\n                {todos.map(todo =>(\r\n                    <Todo key={todo.id} \r\n                    toggleComplete={()=> this.toggleComplete(todo.id)} \r\n                    onDelete={()=> this.handledeleteTodo(todo.id)}\r\n                    todo={todo} />\r\n                ))}\r\n                <div>todos left : {this.state.todos.filter(todo=> !todo.complete).length}</div>\r\n                <div>\r\n                    <button onClick={()=> this.updateTodoToShow(\"all\")}>all</button>\r\n                    <button onClick={()=> this.updateTodoToShow(\"active\")}>active</button>\r\n                    <button onClick={()=> this.updateTodoToShow(\"complete\")}>complete</button>\r\n                </div>\r\n                {/* {this.state.todos.filter(todo => todo.complete).length ? <div> */}\r\n                {this.state.todos.some(todo => todo.complete) ? <div>\r\n                <button onClick={this.removeAllTodosThatAreComplete}>remove all complete todos</button>\r\n                </div> : null }\r\n\r\n                <div>\r\n                    <button onClick={()=>\r\n                    this.setState((state)=> ({\r\n                        todos: state.todos.map(todo =>({\r\n                            ...todo,\r\n                            complete: state.toggleAllcomplete\r\n                        })),\r\n                        toggleAllcomplete: !state.toggleAllcomplete\r\n                    }))\r\n                    }\r\n                    >toggle all complete : {`${this.state.toggleAllcomplete}`}</button>\r\n                </div>\r\n            </div>\r\n        );\r\n        \r\n    }   \r\n}\r\n","\nimport React, { Component } from 'react';\n\nimport {ToDoList} from './component/ToDoList';\nimport './App.css';\n\n\nclass App extends Component {\n  state ={\n    visible: true,\n    count:0\n  };\n\n  render()\n  {\n      return (\n      <div className=\"App\">\n        <ToDoList />\n      </div>\n      );\n\n\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}